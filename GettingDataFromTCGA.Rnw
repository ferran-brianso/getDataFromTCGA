\documentclass{article}
\usepackage{underscore}
\usepackage[utf8]{inputenc}
\usepackage{longtable}
\usepackage[margin=1in]{geometry}
%\usepackage[spanish]{babel}
\usepackage{hyperref}
\usepackage{graphicx}


\begin{document}
\SweaveOpts{concordance=TRUE}

\title{Getting Data from TCGA}
\author{Alex S\'anchez$\sp {1,2}$}
\date{$\sp 1$Statistics and Bioinformatics Unit (VHIR)\\
 $\sp 2$ Statistics Department. University of Barcelona}

\maketitle

\tableofcontents

<<options, include=FALSE>>=
if(!require(knitr)) install.packages("knitr")
require(knitr)
opts_chunk$set(fig.path = 'images/grafic', tidy = FALSE, cache = FALSE, message = FALSE, echo = FALSE, print = FALSE) #, fig.width=7, fig.height=7)
options(width=80, warn=0, digits=4)
options(scipen=100)
options(java.parameters = "-Xmx4g" )
@

<<librerias, echo=FALSE, message=FALSE, warning=FALSE, results='hide'>>=
installifnot <- function(pckgName){
 if (!(require(pckgName, character.only = TRUE))) {
 install.packages(pckgName)
  }else{
    print(paste("Package", pckgName, "already installed", sep = " "))
  } 
}
installBiocifnot <- function(pckgName){
 if (!(require(pckgName, character.only = TRUE))) {
    source("https://bioconductor.org/biocLite.R")
    biocLite(eval(pckgName), suppressUpdates = TRUE)
  }else{
    print(paste("Package", pckgName, "already installed", sep = " "))
  } 
}

installBiocifnot("RTCGAToolbox")
installBiocifnot("TCGA2STAT")
installBiocifnot("TCGAbiolinks")
installBiocifnot("cgdsr")
@

<<printr, eval=FALSE>>=
if(!(require(printr))) {
  install.packages(
    'printr',
    type = 'source',
    repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
  )
}
@


\section{Introduction}

The TCGA is a powerful ressource. There are many packages to get data from it.
This document is an illustration which does not intend to be exhaustive, on how to do this with some of these packages.

We will attempt to show how to download ovarian cancer microRNA data jointly with clinical variables. It is interesting to note that the results differ, although this may also be due to the fact that we provide wrong instructions.

\section{Using the \texttt{RTCGAToolbox} package}

<<RTCGAToolbox>>=
require(RTCGAToolbox)
FIREHOSE_DATE = "20150402"
firehose_datasets = getFirehoseDatasets()
firehose_datasets

# Ovarian Serous Cystadenocarcinoma = OV
cancer_type = "OV"

downloadedData <- getFirehoseData (dataset=cancer_type, runDate=FIREHOSE_DATE, 
                                   destdir=".", 
                                   Clinic = TRUE, Methylation=TRUE)
slotNames(downloadedData)

ov_clinical <- downloadedData@Clinical
ov_methylation <- downloadedData@Methylation
class(ov_methylation)
lapply(ov_methylation, class)

methylDat27K<- ov_methylation[[1]]@DataMatrix
class(methylDat27K)
methylDat450K<- ov_methylation[[2]]@DataMatrix

slotNames(downloadedData2)
ov_expression <-  downloadedData2@mRNAArray
lapply(ov_expression, class)
mRNAHGU133a <- ov_expression[[3]]@DataMatrix

clinical_variables = colnames(ov_clinical)
clinical_variables_without_content = clinical_variables[sapply(ov_clinical, function(x)all(is.na(x)))]
clinical_variables_with_content = clinical_variables[! sapply(ov_clinical, function(x)all(is.na(x)))]

dim(ov_clinical)
length(clinical_variables_with_content)

write.table(ov_clinical, "RTCGAToolbox_ov_clinical.txt", quote = F, sep = '\t')

@

\section{Using the \texttt{TCGA2STAT} package}

<<TCGA2STAT>>=
require(TCGA2STAT)
ov_clinical_2 <- getTCGA(disease = "OV", data.type = "Methylation", clinical=TRUE)
ov_clinical_2[ov_clinical_2 == 'NA'] <- NA

clinical_variables_2 = colnames(ov_clinical_2)
clinical_variables_2_without_content = clinical_variables_2[sapply(ov_clinical_2, function(x)all(is.na(x)))]
clinical_variables_2_with_content = clinical_variables_2[! sapply(ov_clinical_2, function(x)all(is.na(x)))]

class(ov_clinical_2)
dim(ov_clinical_2)
length(clinical_variables_2_with_content)

write.table(ov_clinical_2, "TCGA2STAT_ov_clinical.processed.txt", quote = F, sep = '\t')

@

\section{Using the \texttt{TCGAbiolinks} package}

<<TCGA2STAT>>=
require(TCGAbiolinks)

ov_clinical_3 <- TCGAquery_clinic("OV","clinical_patient")
ov_clinical_3_cleaned = ov_clinical_3[ , ! sapply(ov_clinical_3, function(x)all(x == '[Not Applicable]'))]
ov_clinical_3_cleaned[ov_clinical_3_cleaned == '[Not Available]'] <- NA

clinical_variables_3 = colnames(ov_clinical_3_cleaned)
clinical_variables_3_without_content = clinical_variables_3[sapply(ov_clinical_3_cleaned, function(x)all(is.na(x)))]
clinical_variables_3_with_content = clinical_variables_3[! sapply(ov_clinical_3_cleaned, function(x)all(is.na(x)))]

dim (ov_clinical_3_cleaned)
length(clinical_variables_3_with_content)
write.table(ov_clinical_3_cleaned, "TCGAbiolinks_ov_clinical.txt", quote = F, sep = '\t')
@
\end{document}
